// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Discrete_Coexpnet
DataFrame Discrete_Coexpnet(IntegerMatrix children, IntegerMatrix parents, StringVector c_names, StringVector p_names, int nthreads, bool identical);
RcppExport SEXP _DiffXCoExpNet_Discrete_Coexpnet(SEXP childrenSEXP, SEXP parentsSEXP, SEXP c_namesSEXP, SEXP p_namesSEXP, SEXP nthreadsSEXP, SEXP identicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type c_names(c_namesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type p_names(p_namesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type identical(identicalSEXP);
    rcpp_result_gen = Rcpp::wrap(Discrete_Coexpnet(children, parents, c_names, p_names, nthreads, identical));
    return rcpp_result_gen;
END_RCPP
}
// Coexpnet
DataFrame Coexpnet(NumericMatrix children, NumericMatrix parents, StringVector c_names, StringVector p_names, IntegerVector k, int nthreads, bool identical);
RcppExport SEXP _DiffXCoExpNet_Coexpnet(SEXP childrenSEXP, SEXP parentsSEXP, SEXP c_namesSEXP, SEXP p_namesSEXP, SEXP kSEXP, SEXP nthreadsSEXP, SEXP identicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type c_names(c_namesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type p_names(p_namesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type identical(identicalSEXP);
    rcpp_result_gen = Rcpp::wrap(Coexpnet(children, parents, c_names, p_names, k, nthreads, identical));
    return rcpp_result_gen;
END_RCPP
}
// Discrete_DiffCoexpnet
DataFrame Discrete_DiffCoexpnet(IntegerMatrix exp_matr, int n_conditions, IntegerVector conditions, IntegerMatrix indices, StringVector g_names, IntegerVector g_levels, int nthreads);
RcppExport SEXP _DiffXCoExpNet_Discrete_DiffCoexpnet(SEXP exp_matrSEXP, SEXP n_conditionsSEXP, SEXP conditionsSEXP, SEXP indicesSEXP, SEXP g_namesSEXP, SEXP g_levelsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type exp_matr(exp_matrSEXP);
    Rcpp::traits::input_parameter< int >::type n_conditions(n_conditionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type conditions(conditionsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type g_names(g_namesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g_levels(g_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Discrete_DiffCoexpnet(exp_matr, n_conditions, conditions, indices, g_names, g_levels, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// DiffCoexpnet
DataFrame DiffCoexpnet(NumericMatrix exp_matr, int n_conditions, IntegerVector conditions, IntegerMatrix indices, StringVector g_names, IntegerVector k, int nthreads);
RcppExport SEXP _DiffXCoExpNet_DiffCoexpnet(SEXP exp_matrSEXP, SEXP n_conditionsSEXP, SEXP conditionsSEXP, SEXP indicesSEXP, SEXP g_namesSEXP, SEXP kSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type exp_matr(exp_matrSEXP);
    Rcpp::traits::input_parameter< int >::type n_conditions(n_conditionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type conditions(conditionsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type g_names(g_namesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(DiffCoexpnet(exp_matr, n_conditions, conditions, indices, g_names, k, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// tableRcpp
NumericMatrix tableRcpp(NumericVector x, NumericVector y, int xlevels, int ylevels);
RcppExport SEXP _DiffXCoExpNet_tableRcpp(SEXP xSEXP, SEXP ySEXP, SEXP xlevelsSEXP, SEXP ylevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type xlevels(xlevelsSEXP);
    Rcpp::traits::input_parameter< int >::type ylevels(ylevelsSEXP);
    rcpp_result_gen = Rcpp::wrap(tableRcpp(x, y, xlevels, ylevels));
    return rcpp_result_gen;
END_RCPP
}
// SharmaSongTestRcpp
List SharmaSongTestRcpp(List tables, int nrows, int ncols);
RcppExport SEXP _DiffXCoExpNet_SharmaSongTestRcpp(SEXP tablesSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type tables(tablesSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(SharmaSongTestRcpp(tables, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DiffXCoExpNet_Discrete_Coexpnet", (DL_FUNC) &_DiffXCoExpNet_Discrete_Coexpnet, 6},
    {"_DiffXCoExpNet_Coexpnet", (DL_FUNC) &_DiffXCoExpNet_Coexpnet, 7},
    {"_DiffXCoExpNet_Discrete_DiffCoexpnet", (DL_FUNC) &_DiffXCoExpNet_Discrete_DiffCoexpnet, 7},
    {"_DiffXCoExpNet_DiffCoexpnet", (DL_FUNC) &_DiffXCoExpNet_DiffCoexpnet, 7},
    {"_DiffXCoExpNet_tableRcpp", (DL_FUNC) &_DiffXCoExpNet_tableRcpp, 4},
    {"_DiffXCoExpNet_SharmaSongTestRcpp", (DL_FUNC) &_DiffXCoExpNet_SharmaSongTestRcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_DiffXCoExpNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
